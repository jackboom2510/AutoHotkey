{
    "AutoHotkey Include": {
        "prefix": ["ahk", "ahk_include", "_include"],
        "body": [
            "#Requires AutoHotkey v2+",
            "#SingleInstance Force",
            "CoordMode \"Mouse\", \"Screen\"",
            "Persistent",
            "endl := '`n'",
            "",
            "#Include <Log>",
            "$0",
        ]
    },
    "AutoHotkey UI": {
        "prefix": ["ahk_ui", "ahk", "_ui"],
        "body": [
            "_UI",
            "$0",
            "class _UI {",
            "    gui := unset",
            "    guiID := \"\"",
            "    name := \"UI\"",
            "    guiOpts := \"+AlwaysOnTop +Resize -DPIScale -Caption\"",
            "",
            "    xpos := 0",
            "    ypos := 0",
            "    guiWidth := 0",
            "    guiHeight := 0",
            "",
            "    transparency := 225",
            "    transparencyMin := 120",
            "    transparencyMax := 255",
            "    transparencyStep := 15",
            "",
            "    transparencyEdit := \"\"",
            "    transparencyUpDown := \"\"",
            "",
            "    __New(options := \"\", args*) {",
            "        if (this.guiID) {",
            "            if WinExist(\"ahk_class AutoHotkeyGUI ahk_id \" this.guiID) {",
            "                return",
            "            }",
            "        }",
            "        this.gui := Gui(this.guiOpts, this.name)",
            "        this.gui.SetFont(\"s10\", \"Verdana\")",
            "        this.gui.BackColor := \"E0FFFF\"",
            "",
            "        this.SetupAll()",
            "        this.ParseOptions(options)",
            "        this.ParseArgs(args*)",
            "",
            "        this.Show()",
            "        WinSetTransColor(this.gui.BackColor, this.name)",
            "        WinSetTransparent(this.transparency, this.name)",
            "        OnMessage(0x0200, ObjBindMethod(this, \"On_WM_MOUSEMOVE\"))",
            "        OnMessage(0x4E, ObjBindMethod(this, \"On_WM_NOTIFY\"))",
            "    }",
            "    SetUpAll() {",
            "        SetupControls",
            "        SetupEvents",
            "        SetupToolTips",
            "        return",
            "        SetupControls() {",
            "            ; this.gui.AddEdit(\"w60 +Right\").ToolTip := \"Adjust \" this.name \"'s transparency (\" this.transparencyMin \"â€“\" this.transparencyMax \").\"",
            "            ; this.transparencyUpDown := this.gui.AddUpDown(\"Range\" this.transparencyMin \"-\" this.transparencyMax,",
            "            ;     this.transparency)",
            "        }",
            "        SetupEvents() {",
            "",
            "        }",
            "        SetupToolTips() {",
            "        }",
            "    }",
            "",
            "    ParseOptions(options) {",
            "        flags := {",
            "            w: \"(\\d+)\",",
            "            h: \"(\\d+)\",",
            "            x: \"(\\d+)\",",
            "            y: \"(\\d+)\",",
            "        }",
            "        for flag, regex in flags.OwnProps() {",
            "            while RegExMatch(options, flag . \"\\{\" . regex . \"\\}\", &Match) {",
            "                switch flag {",
            "                    case \"w\": this.guiWidth := Match[1]",
            "                    case \"h\": this.guiHeight := Match[1]",
            "                    case \"x\": this.xPos := Match[1]",
            "                    case \"y\": this.yPos := Match[1]",
            "                }",
            "                break",
            "            }",
            "        }",
            "        if RegExMatch(options, \"\\b(?!w|h|x|y)(\\w+)\\{([^}]+)\\}\", &match) {",
            "            invalid_flag := match[1]",
            "            invalid_value := match[2]",
            "            TrayTip(\":x: Invalid flag: `\"\" invalid_flag \"`\" with value: `\"\" invalid_value \"`\"\",",
            "                \":x: Invalid flag detected!\", 3)",
            "            return",
            "        }",
            "    }",
            "",
            "    ParseArgs(args*) {",
            "        for index, arg in args {",
            "            if (arg ~= \"^p\\{(.+)\\}(.+)$\") {",
            "                key := RegExMatch(arg, \"^p\\{(.+)\\}(.+)$\", &Match)",
            "                if (key) {",
            "                    this.%Match[1]% := Match[2]",
            "                }",
            "            } else {",
            "                TrayTip \":x: Invalid argument format in args.\"",
            "                OutputDebug \":x: Invalid argument format in args: \" arg",
            "            }",
            "        }",
            "    }",            
            "",
            "    Show(options := \"\") {",
            "        ShowOpts := \"Restore \"",
            "        if (this.xpos != 0)",
            "            ShowOpts .= Format(\"x{} \", this.xpos)",
            "        if (this.ypos != 0)",
            "            ShowOpts .= Format(\"y{} \", this.ypos)",
            "        if (this.guiWidth != 0)",
            "            ShowOpts .= Format(\"w{} \", this.guiWidth)",
            "        if (this.guiHeight != 0)",
            "            ShowOpts .= Format(\"h{} \", this.guiHeight)",
            "        this.gui.Show(ShowOpts options)",
            "    }",
            "",
            "    Toggle() {",
            "        if !WinExist(\"ahk_id \" this.gui.hwnd)",
            "            this.Show()",
            "        else",
            "            this.gui.Hide()",
            "    }",
            "",
            "    On_WM_NOTIFY(wParam, lParam, Msg, hWnd) {",
            "        UDN_DELTAPOS := -722",
            "        is64Bit := (A_PtrSize = 8)",
            "",
            "        NMUPDOWN := Buffer(is64Bit ? 40 : 24, 0)",
            "        DllCall(\"RtlMoveMemory\", \"Ptr\", NMUPDOWN.Ptr, \"Ptr\", lParam, \"UPtr\", NMUPDOWN.Size)",
            "",
            "        hwndFrom := NumGet(NMUPDOWN, 0, \"UPtr\")",
            "        code := NumGet(NMUPDOWN, is64Bit ? 16 : 8, \"Int\")",
            "        delta := NumGet(NMUPDOWN, is64Bit ? 28 : 16, \"Int\")",
            "",
            "        if (hwndFrom = this.transparencyUpDown.hwnd && code = UDN_DELTAPOS) {",
            "            newVal := this.transparencyUpDown.Value + delta * this.transparencyStep",
            "            newVal := Min(Max(newVal, this.transparencyMin), this.transparencyMax)",
            "            this.transparencyUpDown.Value := newVal",
            "            this.transparency := newVal",
            "            WinSetTransparent this.transparency, this.name",
            "            return true",
            "        }",
            "    }",
            "",
            "    On_WM_MOUSEMOVE(wParam, lParam, msg, Hwnd) {",
            "        PrevHwnd := 0",
            "        if (Hwnd != PrevHwnd) {",
            "            Text := \"\"",
            "            SetTimer(ToolTip)",
            "            CurrControl := GuiCtrlFromHwnd(Hwnd)",
            "            if CurrControl {",
            "                if !CurrControl.HasProp(\"ToolTip\")",
            "                    return",
            "                Text := CurrControl.ToolTip",
            "                ToolTip(Text)",
            "            }",
            "            PrevHwnd := Hwnd",
            "        }",
            "    }",
            "}",
            "",
        ]
    },
    "TrayMenu Setup": {
        "prefix": ["ahk", "_TrayMenu", "_setup", "menu", "_menu"],
        "body": [
        "A_TrayMenu.Delete()",
        "A_TrayMenu.AddStandard()",
        "if (A_IsCompiled) {",
        "    A_TrayMenu.Insert(\"&Suspend Hotkeys\", \"Reload Script\", (*) => Reload())",
        "    A_TrayMenu.Insert(\"&Suspend Hotkeys\", \"Edit Script\", (*) => Run(\"*edit \" \"C:\\Users\\jackb\\Documents\\AutoHotkey\\src\\v2\\\\$1.ahk\"))",
        "    A_TrayMenu.Insert(\"&Suspend Hotkeys\")",
        "}",
        "A_TrayMenu.Insert(\"E&xit\")",
        "A_TrayMenu.Insert(\"E&xit\", \"Open File Location\", (*) => Run(\"*open \" \"C:\\Users\\jackb\\Documents\\AutoHotkey\\src\\v2\\\"))",
        "A_TrayMenu.SetIcon(\"Open File Location\", \"C:\\Windows\\System32\\shell32.dll\", 4)",
        "A_TrayMenu.Insert(\"E&xit\", \"Show Hotkeys\", (*) => ShowScriptHotkeysUI())",
        "A_TrayMenu.SetIcon(\"Show Hotkeys\", \"C:\\Windows\\System32\\shell32.dll\", 24)",
        "A_TrayMenu.Insert(\"E&xit\", \"${0:Favorites}\", (*) => $1.$0)",
        "A_TrayMenu.Insert(\"E&xit\")",
        "A_TrayMenu.SetIcon(\"${0:Favorites}\", \"C:\\Windows\\System32\\shell32.dll\", 44)",
        "A_TrayMenu.Insert(\"E&xit\", \"Show/Hide\", (*) => $1.Toggle())",
        "A_TrayMenu.Default := \"Show/Hide\"",
        "A_TrayMenu.ClickCount := 1",
        ]
    },
    "Add Btn": {
        "prefix": "_a",
        "body": [
            "this.gui.${1:AddText}(,\"${2:\"\"}\")$0"
        ]
    }
}
