{
    "AutoHotkey Include": {
        "prefix": ["ahk", "ahk_include", "_include"],
        "body": [
            "#Requires AutoHotkey v2+",
            "#SingleInstance Force",
            "CoordMode \"Mouse\", \"Screen\"",
            "Persistent",
            "endl := '`n'",
            "",
            "#Include <Log>",
            "$0",
        ]
    },
    "AutoHotkey UI": {
        "prefix": ["ahk_ui", "ahk", "_ui"],
        "body": [
            "_UI",
            "$0",
            "class _UI {",
            "    gui := unset",
            "    name := \"UI\"",
            "    guiOpts := \"+AlwaysOnTop +Resize -DPIScale\"",
            "",
            "    xpos := 0",
            "    ypos := 0",
            "    guiWidth := 0",
            "    guiHeigth := 0",
            "",
            "    transparency := 225",
            "    transparencyMin := 120",
            "    transparencyMax := 255",
            "    transparencyStep := 15",
            "",
            "    transparencyEdit := \"\"",
            "    transparencyUpDown := \"\"",
            "",
            "    __New() {",
            "        this.gui := Gui(this.guiOpts, this.name)",
            "        this.gui.SetFont(\"s10\", \"Verdana\")",
            "        this.gui.BackColor := \"E0FFFF\"",
            "",
            "        this.SetupAll()",
            "",
            "        this.Show()",
            "        WinSetTransColor(this.gui.BackColor, this.name)",
            "        WinSetTransparent(this.transparency, this.name)",
            "        OnMessage(0x0200, ObjBindMethod(this, \"On_WM_MOUSEMOVE\"))",
            "        OnMessage(0x4E, ObjBindMethod(this, \"On_WM_NOTIFY\"))",
            "    }",
            "    SetUpAll() {",
            "        SetupControls() {",
            "            ; this.gui.AddEdit(\"w60 +Right\").ToolTip := \"Adjust \" this.name \"'s transparency (\" this.transparencyMin \"â€“\" this.transparencyMax \").\"",
            "            ; this.transparencyUpDown := this.gui.AddUpDown(\"Range\" this.transparencyMin \"-\" this.transparencyMax,",
            "            ;     this.transparency)",
            "        }",
            "        SetupEvents() {",
            "",
            "        }",
            "        SetupToolTips() {",
            "        }",
            "        SetupControls",
            "        SetupEvents",
            "        SetupToolTips",
            "    }",
            "",
            "    Show(xpos := this.xpos, ypos := this.ypos, guiWidth := this.guiWidth, guiHeight := this.guiHeigth, option*) {",
            "        xpos := (xpos = 0) ? \"Center\" : xpos",
            "        ypos := (ypos = 0) ? \"Center\" : ypos",
            "        if (guiWidth = 0 || guiWidth = 0) {",
            "            this.gui.Show(\"x\" xpos \" y\" ypos \" Restore\")",
            "        }",
            "        else {",
            "            this.gui.Show(\"x\" xpos \" y\" ypos \" w\" guiWidth \" h\" guiHeight \" Restore\" option*)",
            "        }",
            "    }",
            "",
            "    ToggleGUI() {",
            "        if !WinExist(\"ahk_id \" this.gui.hwnd)",
            "            this.gui.Show()",
            "        else",
            "            this.gui.Hide()",
            "    }",
            "",
            "    On_WM_NOTIFY(wParam, lParam, Msg, hWnd) {",
            "        UDN_DELTAPOS := -722",
            "        is64Bit := (A_PtrSize = 8)",
            "",
            "        NMUPDOWN := Buffer(is64Bit ? 40 : 24, 0)",
            "        DllCall(\"RtlMoveMemory\", \"Ptr\", NMUPDOWN.Ptr, \"Ptr\", lParam, \"UPtr\", NMUPDOWN.Size)",
            "",
            "        hwndFrom := NumGet(NMUPDOWN, 0, \"UPtr\")",
            "        code := NumGet(NMUPDOWN, is64Bit ? 16 : 8, \"Int\")",
            "        delta := NumGet(NMUPDOWN, is64Bit ? 28 : 16, \"Int\")",
            "",
            "        if (hwndFrom = this.transparencyUpDown.hwnd && code = UDN_DELTAPOS) {",
            "            newVal := this.transparencyUpDown.Value + delta * this.transparencyStep",
            "            newVal := Min(Max(newVal, this.transparencyMin), this.transparencyMax)",
            "            this.transparencyUpDown.Value := newVal",
            "            this.transparency := newVal",
            "            WinSetTransparent this.transparency, this.name",
            "            return true",
            "        }",
            "    }",
            "",
            "    On_WM_MOUSEMOVE(wParam, lParam, msg, Hwnd) {",
            "        PrevHwnd := 0",
            "        if (Hwnd != PrevHwnd) {",
            "            Text := \"\"",
            "            SetTimer(ToolTip)",
            "            CurrControl := GuiCtrlFromHwnd(Hwnd)",
            "            if CurrControl {",
            "                if !CurrControl.HasProp(\"ToolTip\")",
            "                    return",
            "                Text := CurrControl.ToolTip",
            "                ToolTip(Text)",
            "            }",
            "            PrevHwnd := Hwnd",
            "        }",
            "    }",
            "}",
            "",
        ]
    },
    "TrayMenu Setup": {
        "prefix": ["ahk", "_TrayMenu", "_setup", "menu", "_menu"],
        "body": [
        "A_TrayMenu.Delete()",
        "A_TrayMenu.AddStandard()",
        "A_TrayMenu.Insert(\"&Suspend Hotkeys\", \"Reload Script\", (*) => Reload())",
        "A_TrayMenu.Insert(\"&Suspend Hotkeys\", \"Edit Script\", (*) => Run(\"*edit \" \"C:\\Users\\jackb\\Documents\\AutoHotkey\\src\\v2$1.ahk\"))",
        "A_TrayMenu.Insert(\"&Suspend Hotkeys\")",
        "A_TrayMenu.Insert(\"E&xit\")",
        "A_TrayMenu.Insert(\"E&xit\", \"Show/Hide\", (*) => $1.Toggle())",
        "A_TrayMenu.Insert(\"E&xit\", \"${0:Favorites}\", (*) => $2.DisplayMenu())",
        "A_TrayMenu.Insert(\"E&xit\", \"Open File Location\", (*) => Run(\"*open \" \"C:\\Users\\jackb\\Documents\\AutoHotkey\\src\\v2\\\"))",
        "A_TrayMenu.SetIcon(\"Open File Location\", \"C:\\Windows\\System32\\shell32.dll\", 4)",
        "A_TrayMenu.SetIcon(\"${0:Favorites}\", \"C:\\Windows\\System32\\shell32.dll\", 44)",
        "A_TrayMenu.Insert(\"E&xit\", \"Show Hotkeys\", (*) => ShowScriptHotkeysUI())",
        "A_TrayMenu.SetIcon(\"Show Hotkeys\", \"C:\\Windows\\System32\\shell32.dll\", 24)",
        "A_TrayMenu.Default := \"${0:Favorites}\"",
        "A_TrayMenu.ClickCount := 1",
        ]
    }
}
