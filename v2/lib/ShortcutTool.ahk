#Requires AutoHotkey v2.0
#SingleInstance Force
SetTitleMatchMode(2)
Persistent()

waitTime := 300

class ShortcutTool
{
    static configFile := A_ScriptDir "\config.ini"
    static defaultPath := ""
    static gui := unset
    static pathLabel := ""
    static btnBrowse := ""
    static btnApply := ""
    static transparency := 200

    static CreateGui()
    {
        ShortcutTool.gui := Gui("+AlwaysOnTop -Caption +Resize", "Shortcut Tool")
        ; ShortcutTool.gui.BackColor := "Fuchsia"
        ShortcutTool.gui.SetFont("s10", "Segoe UI")

        ; ShortcutTool.gui.Add("Text", , "Th∆∞ m·ª•c m·∫∑c ƒë·ªãnh:")
        ShortcutTool.pathLabel := ShortcutTool.gui.Add("Edit", "x10 y+5 w225", ShortcutTool.defaultPath)
        ShortcutTool.btnBrowse := ShortcutTool.gui.Add("Button", "x+5 yp w30", "üóÇ")
        ShortcutTool.btnPaste := ShortcutTool.gui.Add("Button", "xp+35 yp w30", "üìã")
        ShortcutTool.btnSetDefault := ShortcutTool.gui.Add("Button", "xp+35 yp w30", "üíæ")
        ShortcutTool.btnHide := ShortcutTool.gui.Add("Button", "xp+35 yp w30", "üëÅÔ∏è‚Äçüó®")
        ShortcutTool.btnReset := ShortcutTool.gui.Add("Button", "xp y+5 w30", "‚Ü©")
        ShortcutTool.btnTransparentUp := ShortcutTool.gui.Add("Button", "xp-35 yp w30", "‚ûï")
        ShortcutTool.btnTransparentDown := ShortcutTool.gui.Add("Button", "xp-35 yp w30", "‚ûñ")
        ShortcutTool.btnApply := ShortcutTool.gui.Add("Button", "xp-35 yp w30", "‚úÖ")
        ShortcutTool.gui.Add("Button", "xm yp w120", "‚ûï Shortcut").OnEvent("Click", (*) => ShortcutTool.AddShortcut())
        ShortcutTool.gui.Add("Button", "x+5 w100", "Exit").OnEvent("Click", (*) => ExitApp())
        ShortcutTool.btnSetDefault.OnEvent("Click", (*) => ShortcutTool.SetAsDefaultPath())
        ShortcutTool.btnTransparentDown.OnEvent("Click", (*) => ShortcutTool.DecreaseTransparency())
        ShortcutTool.btnTransparentUp.OnEvent("Click", (*) => ShortcutTool.IncreaseTransparency())
        ShortcutTool.btnPaste.OnEvent("Click", (*) => ShortcutTool.PasteFromClipboard())  
        ShortcutTool.btnBrowse.OnEvent("Click", (*) => ShortcutTool.ChangePath())
        ShortcutTool.btnApply.OnEvent("Click", (*) => ShortcutTool.ApplyPathFromEdit())
        ShortcutTool.btnReset.OnEvent("Click", (*) => ShortcutTool.ResetPathToDefault())
        ShortcutTool.btnHide.OnEvent("Click", (*) => ShortcutTool.gui.Hide())
        ShortcutTool.gui.OnEvent("Size", (*) => ShortcutTool.ResizeControls)

        ShortcutTool.gui.Show("x1200 y85 AutoSize")
        WinSetTransparent 200, "Shortcut Tool"
    }
    
    static ResizeControls(guiObj, minMax, width, height)
    {
        marginRight := 10
        spacing := 5
        btnW := 30

        ; T·ªïng chi·ªÅu r·ªông 6 n√∫t: 6 n√∫t + 5 kho·∫£ng spacing
        totalBtnWidth := 6 * btnW + 5 * spacing

        ; T√≠nh v·ªã tr√≠ b·∫Øt ƒë·∫ßu c·ªßa n√∫t ƒë·∫ßu ti√™n (btnPaste) sao cho n√∫t cu·ªëi c√πng (btnApply) s√°t l·ªÅ ph·∫£i
        btnStartX := width - marginRight - totalBtnWidth

        ; L·∫•y v·ªã tr√≠ Y t·ª´ pathLabel
        x := y := w := h := 0
        ControlGetPos(&x, &y, &w, &h, ShortcutTool.pathLabel)

        ; Resize Edit ƒë·ªÉ chi·∫øm ph·∫ßn c√≤n l·∫°i b√™n tr√°i
        ShortcutTool.pathLabel.Move(, , btnStartX - x - spacing)

        ; Di chuy·ªÉn c√°c n√∫t theo chi·ªÅu ngang, t·ª´ ph·∫£i sang tr√°i
        ShortcutTool.btnPaste.Move(btnStartX + 0 * (btnW + spacing), y)
        ShortcutTool.btnBrowse.Move(btnStartX + 1 * (btnW + spacing), y)
        ShortcutTool.btnHide.Move(btnStartX + 2 * (btnW + spacing), y)
        ShortcutTool.btnReset.Move(btnStartX + 3 * (btnW + spacing), y)
        ShortcutTool.btnApply.Move(btnStartX + 4 * (btnW + spacing), y)
        ShortcutTool.btnSetDefault.Move(btnStartX + 5 * (btnW + spacing), y)
    }

    static UpdateTransparency()
    {
        hwnd := ShortcutTool.gui.Hwnd
        if WinExist("ahk_id " hwnd)
            WinSetTransparent(ShortcutTool.transparency, "ahk_id " hwnd)
    }

    static IncreaseTransparency()
    {
        ShortcutTool.transparency := Min(ShortcutTool.transparency + 25, 255)
        ShortcutTool.UpdateTransparency()
    }

    static DecreaseTransparency()
    {
        ShortcutTool.transparency := Max(ShortcutTool.transparency - 25, 50)
        ShortcutTool.UpdateTransparency()
    }


    static Toggle()
    {
        if !ShortcutTool.gui
        {
            ShortcutTool.CreateGui()
            return
        }

        hwnd := ShortcutTool.gui.Hwnd

        ; Ki·ªÉm tra c·ª≠a s·ªï c√≥ t·ªìn t·∫°i hay kh√¥ng
        if !WinExist("ahk_id " hwnd)
        {
            ShortcutTool.gui.Show("x1200 y85 AutoSize")
            return
        }

        winState := WinGetMinMax("ahk_id " hwnd)  ; -1: hidden, 0: normal, 1: maximized

        if winState = -1
            ShortcutTool.gui.Show("x1200 y85 AutoSize")
        else
            ShortcutTool.gui.Hide()
    }

    static AddShortcut()
    {
        ; B1: Ki·ªÉm tra Chrome v√† l·∫•y URL
        if !WinExist("ahk_exe chrome.exe") {
            MsgBox("Kh√¥ng t√¨m th·∫•y c·ª≠a s·ªï Chrome ƒëang m·ªü!", "L·ªói", 16)
            return
        }

        ; L·∫•y ti√™u ƒë·ªÅ Chrome tr∆∞·ªõc khi chuy·ªÉn URL
        WinActivate("ahk_exe chrome.exe")
        winTitle := WinGetTitle("A")

        ; B2: L·∫•y URL t·ª´ thanh ƒë·ªãa ch·ªâ
        Send("^l")
        Send("^c")
        Sleep 300
        if !ClipWait(2) || A_Clipboard = "" {
            MsgBox("Clipboard tr·ªëng ho·∫∑c kh√¥ng l·∫•y ƒë∆∞·ª£c URL!", "L·ªói", 16)
            return
        }
        url := A_Clipboard

        ; B3: T·∫°o ti√™u ƒë·ªÅ h·ª£p l·ªá
        title := StrReplace(winTitle, " - Google Chrome")              ; Xo√° h·∫≠u t·ªë Chrome
        title := Trim(title)

        ; B3.1: Th√™m ti·ªÅn t·ªë v√† x·ª≠ l√Ω ƒë·∫∑c bi·ªát n·∫øu l√† YouTube
        if InStr(url, "youtube.com") || InStr(url, "youtu.be") {
            title := StrReplace(title, " - YouTube")                   ; Xo√° h·∫≠u t·ªë YouTube n·∫øu c√≥
            prefix := "(Y) "
        } else {
            prefix := "(L) "
        }

        ; B3.2: Xo√° k√Ω t·ª± kh√¥ng h·ª£p l·ªá v√† th√™m ti·ªÅn t·ªë
        title := prefix . RegExReplace(title, "[\\/:*?" "<>|]", "")      ; T√™n file h·ª£p l·ªá

        ; B4: T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
        DirCreate(ShortcutTool.defaultPath)

        ; B5: M·ªü ho·∫∑c chuy·ªÉn th∆∞ m·ª•c trong Explorer
        if WinExist("ahk_class CabinetWClass") {
            WinActivate("ahk_class CabinetWClass")
            Send("!d")
            Sleep 200
            SendText(ShortcutTool.defaultPath)
            Send("{Enter}")
        } else {
            Run("explorer.exe " . ShortcutTool.defaultPath)
            if !WinWaitActive("ahk_class CabinetWClass", , 3) {
                MsgBox("Kh√¥ng th·ªÉ m·ªü File Explorer!", "L·ªói", 16)
                return
            }
        }
        Sleep 300

        ; B6: M√¥ ph·ªèng t·∫°o shortcut
        Send("{AppsKey}")
        Sleep(waitTime)
        Send("!w")
        Sleep(waitTime)
        Send("1")
        Sleep(waitTime)
        Send("s")
        Sleep(waitTime)

        ; B7: Nh·∫≠p URL
        SendText(url)
        Send("{Enter}")
        Sleep(waitTime)

        ; B8: Nh·∫≠p ti√™u ƒë·ªÅ ƒë√£ x·ª≠ l√Ω
        SendText(title)
        Send("{Enter}")
        Sleep(waitTime)

        TrayTip("‚úÖ Shortcut ƒë√£ ƒë∆∞·ª£c t·∫°o v·ªõi ti√™u ƒë·ªÅ:`n" . title, "Ho√†n t·∫•t")
    }
    
    static InitDefaultPath()
    {
        ; N·∫øu file t·ªìn t·∫°i, ƒë·ªçc gi√° tr·ªã
        if FileExist(ShortcutTool.configFile)
        {
            ShortcutTool.defaultPath := IniRead(ShortcutTool.configFile, "ShortcutTool", "defaultPath", "")
        }

        ; N·∫øu kh√¥ng c√≥ gi√° tr·ªã (l·∫ßn ƒë·∫ßu), d√πng gi√° tr·ªã m·∫∑c ƒë·ªãnh
        if ShortcutTool.defaultPath = ""
            ShortcutTool.defaultPath := "D:\5. Jack\#Learn\Language\Japan"
    }

    static SaveDefaultPath()
    {
        IniWrite(ShortcutTool.defaultPath, ShortcutTool.configFile, "ShortcutTool", "defaultPath")
    }

    static SetAsDefaultPath()
    {
        newPath := ShortcutTool.pathLabel.Value
        if newPath != "" && DirExist(newPath) {
            ShortcutTool.defaultPath := newPath
            ShortcutTool.SaveDefaultPath()
            TrayTip("‚úÖ ƒê√£ l∆∞u ƒë∆∞·ªùng d·∫´n l√†m m·∫∑c ƒë·ªãnh:`n" . newPath)
        } else {
            TrayTip("‚ùå ƒê∆∞·ªùng d·∫´n kh√¥ng h·ª£p l·ªá, kh√¥ng th·ªÉ l∆∞u.", "L·ªói", 16)
        }
    }

    static ChangePath()
    {
        newPath := DirSelect(ShortcutTool.defaultPath, 1, "Ch·ªçn th∆∞ m·ª•c l∆∞u shortcut")
        if newPath {
            ShortcutTool.defaultPath := newPath
            ShortcutTool.pathLabel.Value := newPath
            TrayTip("‚úÖ ƒê√£ ch·ªçn th∆∞ m·ª•c:`n" . newPath)
        } else {
            TrayTip("‚ùå Kh√¥ng c√≥ th∆∞ m·ª•c n√†o ƒë∆∞·ª£c ch·ªçn.")
        }
    }

    static ResetPathToDefault()
    {
        ShortcutTool.pathLabel.Value := ShortcutTool.defaultPath
        TrayTip("üîÅ ƒê√£ ho√†n t√°c v·ªÅ ƒë∆∞·ªùng d·∫´n m·∫∑c ƒë·ªãnh.")
    }

    static PasteFromClipboard()
    {
        if A_Clipboard != ""
        {
            ShortcutTool.pathLabel.Value := A_Clipboard
            TrayTip("üìã ƒê√£ d√°n t·ª´ clipboard.")
        }
        else
        {
            TrayTip("‚ùå Clipboard ƒëang tr·ªëng.")
        }
    }

    static ApplyPathFromEdit()
    {
        newPath := ShortcutTool.pathLabel.Value
        if newPath != "" && DirExist(newPath) {
            ShortcutTool.defaultPath := newPath
            TrayTip("‚úÖ C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n th√†nh:`n" . newPath)
        } else {
            TrayTip("‚ùå ƒê∆∞·ªùng d·∫´n kh√¥ng h·ª£p l·ªá.", "L·ªói", 16)
        }
    }
}
